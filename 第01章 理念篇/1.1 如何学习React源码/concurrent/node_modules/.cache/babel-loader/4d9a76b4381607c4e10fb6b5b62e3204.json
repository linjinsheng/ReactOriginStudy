{"ast":null,"code":"import _isPlainObject from \"lodash/isPlainObject\";\nimport _values from \"lodash/values\";\nimport _uniqBy from \"lodash/uniqBy\";\nimport _groupBy from \"lodash/groupBy\";\nimport _uniq from \"lodash/uniq\";\nimport _isFunction from \"lodash/isFunction\";\nimport _flatten from \"lodash/flatten\";\nimport _defaults from \"lodash/defaults\";\nimport _assign from \"lodash/assign\";\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from \"react\";\nimport * as Axis from \"./axis\";\nimport * as Style from \"./style\";\nimport * as Data from \"./data\";\nimport * as Domain from \"./domain\";\nimport * as Events from \"./events\";\nimport * as Collection from \"./collection\";\nimport * as Helpers from \"./helpers\";\nimport * as Scale from \"./scale\";\nimport * as Log from \"./log\";\nexport function addBinsToParentPropsIfHistogram(_ref) {\n  var children = _ref.children,\n      props = _ref.props,\n      childComponents = _ref.childComponents,\n      parentProps = _ref.parentProps;\n  var someChildrenAreHistograms = children.some(function (child) {\n    return child.type && child.type.role === \"histogram\";\n  });\n  var allChildrenAreHistograms = someChildrenAreHistograms && children.length && children.every(function (child) {\n    return child.type && child.type.role === \"histogram\";\n  });\n\n  if (someChildrenAreHistograms && !allChildrenAreHistograms) {\n    Log.warn(\"VictoryHistogram only supports being stacked with other VictoryHistogram components. Check to make sure that you are only passing VictoryHistogram components to VictoryStack\");\n  } // if we are stacking histograms, we need to generate explicit bins\n  // or else each histogram may end up having different bins\n\n\n  if (!allChildrenAreHistograms) {\n    return parentProps;\n  }\n\n  var childBins = props.bins || childComponents[0].props.bins; // if we have explicit bins then we don't need to calculate them\n\n  if (!Array.isArray(childBins)) {\n    var combinedData = children.reduce(function (memo, child) {\n      var xAccessor = Helpers.createAccessor(child.props.x || \"x\");\n      return memo.concat(child.props.data.map(function (datum) {\n        return {\n          x: xAccessor(datum)\n        };\n      }));\n    }, []); // use the same function to generate bins as VictoryHistogram but with\n    // the combined data from above, then get explicit bins from that\n\n    var getFormattedHistogramData = children[0].type.getFormattedData;\n    childBins = getFormattedHistogramData({\n      data: combinedData,\n      bins: childBins\n    }).reduce(function (memo, _ref2, index) {\n      var x0 = _ref2.x0,\n          x1 = _ref2.x1;\n      return index === 0 ? memo.concat([x0, x1]) : memo.concat(x1);\n    }, []);\n  }\n\n  return _objectSpread({}, parentProps, {\n    bins: childBins\n  });\n}\nexport function getDataFromChildren(props, childComponents) {\n  var polar = props.polar,\n      startAngle = props.startAngle,\n      endAngle = props.endAngle,\n      categories = props.categories,\n      minDomain = props.minDomain,\n      maxDomain = props.maxDomain;\n  var parentProps = {\n    polar: polar,\n    startAngle: startAngle,\n    endAngle: endAngle,\n    categories: categories,\n    minDomain: minDomain,\n    maxDomain: maxDomain\n  };\n  var stack = 0;\n  var children = childComponents ? childComponents.slice(0) : React.Children.toArray(props.children);\n  parentProps = addBinsToParentPropsIfHistogram({\n    children: children,\n    props: props,\n    childComponents: childComponents,\n    parentProps: parentProps\n  });\n\n  var iteratee = function iteratee(child, childName, parent) {\n    var childProps = _assign({}, child.props, parentProps);\n\n    var childData;\n\n    if (!Data.isDataComponent(child)) {\n      return null;\n    } else if (child.type && _isFunction(child.type.getData)) {\n      child = parent ? React.cloneElement(child, parent.props) : child;\n      childData = child.type.getData(childProps);\n    } else {\n      childData = Data.getData(childProps);\n    }\n\n    stack += 1;\n    return childData.map(function (datum, index) {\n      return _assign({\n        _stack: stack,\n        _group: index\n      }, datum);\n    });\n  };\n\n  var stacked = children.filter(function (c) {\n    return c.type && c.type.role === \"stack\";\n  }).length;\n\n  var combine = function combine(memo, val) {\n    return memo.concat(_uniqBy(val, \"_group\"));\n  };\n\n  var datasets = Helpers.reduceChildren(children, iteratee, props, [], combine);\n  var group = stacked ? \"_group\" : \"_stack\";\n  return _values(_groupBy(datasets, group));\n}\nexport function getData(props, childComponents) {\n  if (props.data) {\n    return Data.getData(props);\n  }\n\n  childComponents = childComponents || React.Children.toArray(props.children);\n  return getDataFromChildren(childComponents);\n}\nexport function getWidth(props, groupLength, seriesLength) {\n  var datasets = props.datasets,\n      horizontal = props.horizontal;\n  var range = horizontal ? Helpers.getRange(props, \"y\") : Helpers.getRange(props, \"x\");\n  var extent = Math.abs(range[1] - range[0]);\n  seriesLength = seriesLength !== undefined ? seriesLength : Array.isArray(datasets[0]) && datasets[0].length || 1;\n  groupLength = groupLength || datasets.length;\n  var bars = groupLength * seriesLength;\n  var barRatio = 0.5;\n  return Math.round(barRatio * extent / bars);\n}\nexport function getDefaultDomainPadding(props, axis, childComponents) {\n  if (props.polar || axis !== \"x\") {\n    return undefined;\n  }\n\n  var groupComponent = childComponents.filter(function (child) {\n    return child.type && child.type.role && child.type.role === \"group\";\n  });\n\n  if (groupComponent.length < 1) {\n    return undefined;\n  }\n\n  var _groupComponent$0$pro = groupComponent[0].props,\n      offset = _groupComponent$0$pro.offset,\n      children = _groupComponent$0$pro.children;\n\n  if (!offset) {\n    return undefined;\n  }\n\n  var firstChild = Array.isArray(children) && children[0];\n\n  if (!firstChild) {\n    return undefined;\n  }\n\n  var barWidth = firstChild.props.barWidth;\n  var dataLength = firstChild.props.data && firstChild.props.data.length || 1;\n\n  if (firstChild && firstChild.type.role === \"stack\") {\n    var nestedChild = firstChild.props.children && firstChild.props.children[0];\n\n    if (!nestedChild) {\n      return undefined;\n    }\n\n    barWidth = nestedChild.props.barWidth;\n    dataLength = firstChild.props.children.length;\n  }\n\n  var width = barWidth || getWidth(props, children.length, dataLength);\n  return {\n    x: width * children.length / 2 + (offset - width * ((children.length - 1) / 2))\n  };\n}\nexport function getDomainFromChildren(props, axis, childComponents) {\n  // eslint-disable-line max-statements, complexity, max-len\n  var children = childComponents ? childComponents.slice(0) : React.Children.toArray(props.children);\n  var parentData = props.data ? Data.getData(props, axis) : undefined;\n  var polar = props.polar,\n      startAngle = props.startAngle,\n      endAngle = props.endAngle,\n      categories = props.categories,\n      minDomain = props.minDomain,\n      maxDomain = props.maxDomain,\n      horizontal = props.horizontal;\n  var baseParentProps = {\n    horizontal: horizontal,\n    polar: polar,\n    startAngle: startAngle,\n    endAngle: endAngle,\n    minDomain: minDomain,\n    maxDomain: maxDomain,\n    categories: categories\n  };\n  var parentProps = parentData ? _assign(baseParentProps, {\n    data: parentData\n  }) : baseParentProps;\n\n  var iteratee = function iteratee(child) {\n    var sharedProps = _assign({}, child.props, parentProps);\n\n    if (!Domain.isDomainComponent(child)) {\n      return null;\n    } else if (child.type && _isFunction(child.type.getDomain)) {\n      return child.props && child.type.getDomain(sharedProps, axis);\n    } else {\n      return Domain.getDomain(sharedProps, axis);\n    }\n  };\n\n  var childDomains = Helpers.reduceChildren(children, iteratee, props);\n  var min = childDomains.length === 0 ? 0 : Collection.getMinValue(childDomains);\n  var max = childDomains.length === 0 ? 1 : Collection.getMaxValue(childDomains);\n  return [min, max];\n}\nexport function getDomain(props, axis, childComponents) {\n  childComponents = childComponents || React.Children.toArray(props.children);\n  var propsDomain = Domain.getDomainFromProps(props, axis);\n  var domainPadding = getDefaultDomainPadding(props, axis, childComponents);\n  var domain;\n\n  if (propsDomain) {\n    domain = propsDomain;\n  } else {\n    var minDomain = Domain.getMinFromProps(props, axis);\n    var maxDomain = Domain.getMaxFromProps(props, axis);\n    var dataset = (props.data || props.y) && Data.getData(props);\n    var dataDomain = dataset ? Domain.getDomainFromData(props, axis, dataset) : [];\n    var childDomain = getDomainFromChildren(props, axis, childComponents);\n    var min = minDomain || Collection.getMinValue(_toConsumableArray(dataDomain).concat(_toConsumableArray(childDomain)));\n    var max = maxDomain || Collection.getMaxValue(_toConsumableArray(dataDomain).concat(_toConsumableArray(childDomain)));\n    domain = Domain.getDomainFromMinMax(min, max);\n  }\n\n  return Domain.formatDomain(domain, _assign({\n    domainPadding: domainPadding\n  }, props), axis);\n}\nexport function getScale(props, axis, childComponents) {\n  if (props.data) {\n    return Scale.getBaseScale(props, axis);\n  }\n\n  var children = childComponents ? childComponents.slice(0) : React.Children.toArray(props.children);\n\n  var iteratee = function iteratee(child) {\n    var sharedProps = _assign({}, child.props, {\n      horizontal: props.horizontal\n    });\n\n    return Scale.getScaleType(sharedProps, axis);\n  };\n\n  var childScale = _uniq(Helpers.reduceChildren(children, iteratee, props)); // default to linear scale if more than one uniq scale type is given by children\n\n\n  return childScale.length > 1 ? Scale.getScaleFromName(\"linear\") : Scale.getScaleFromName(childScale[0]);\n}\nexport function getAllEvents(props) {\n  var components = [\"groupComponent\", \"containerComponent\", \"labelComponent\"];\n  var componentEvents = Events.getComponentEvents(props, components);\n  var events = props.events;\n\n  if (Array.isArray(componentEvents)) {\n    events = Array.isArray(props.events) ? componentEvents.concat.apply(componentEvents, _toConsumableArray(props.events)) : componentEvents;\n  }\n\n  return events || [];\n}\nexport function getColor(calculatedProps, child, index) {\n  // check for styles first\n  var style = calculatedProps.style;\n  var colorScale = calculatedProps.colorScale,\n      color = calculatedProps.color;\n\n  if (style && style.data && style.data.fill) {\n    return style.data.fill;\n  }\n\n  colorScale = child.props && child.props.colorScale ? child.props.colorScale : colorScale;\n  color = child.props && child.props.color ? child.props.color : color;\n\n  if (!colorScale && !color) {\n    return undefined;\n  }\n\n  var colors = Array.isArray(colorScale) ? colorScale : Style.getColorScale(colorScale);\n  return color || colors[index % colors.length];\n}\nexport function getStyle(theme, style, role) {\n  var defaultStyle = theme && theme[role] && theme[role].style ? theme[role].style : {};\n  return Helpers.getStyles(style, defaultStyle);\n}\nexport function getChildStyle(child, index, calculatedProps) {\n  var style = calculatedProps.style,\n      role = calculatedProps.role;\n  var childStyle = child.props.style || {};\n\n  if (Array.isArray(childStyle)) {\n    return childStyle;\n  }\n\n  var childRole = child.type && child.type.role;\n  var defaultFill = childRole === \"stack\" ? undefined : getColor(calculatedProps, child, index);\n  var defaultColor = childRole === \"line\" ? {\n    fill: \"none\",\n    stroke: defaultFill\n  } : {\n    fill: defaultFill\n  };\n  var dataWidth = role === \"stack\" ? {} : {\n    width: getWidth(calculatedProps)\n  };\n\n  var dataStyle = _defaults({}, childStyle.data, _assign({}, dataWidth, style.data, defaultColor));\n\n  var labelsStyle = _defaults({}, childStyle.labels, style.labels);\n\n  return {\n    parent: style.parent,\n    data: dataStyle,\n    labels: labelsStyle\n  };\n}\nexport function getStringsFromCategories(childComponents, axis) {\n  var iteratee = function iteratee(child) {\n    var childProps = child.props || {};\n\n    if (!Domain.isDomainComponent(child) || !childProps.categories) {\n      return null;\n    } else {\n      var categories = childProps.categories && !Array.isArray(childProps.categories) ? childProps.categories[axis] : childProps.props.categories;\n      var categoryStrings = categories && categories.filter(function (val) {\n        return typeof val === \"string\";\n      });\n      return categoryStrings ? Collection.removeUndefined(categoryStrings) : [];\n    }\n  };\n\n  return Helpers.reduceChildren(childComponents.slice(0), iteratee);\n}\nexport function getStringsFromData(childComponents) {\n  var iteratee = function iteratee(child) {\n    var childProps = child.props || {};\n    var data;\n\n    if (!Data.isDataComponent(child)) {\n      return null;\n    } else if (child.type && _isFunction(child.type.getData)) {\n      data = child.type.getData(childProps);\n    } else {\n      data = Data.getData(childProps);\n    }\n\n    return data.map(function (d) {\n      return {\n        x: d.xName,\n        y: d.yName\n      };\n    });\n  };\n\n  var initialMemo = {\n    x: [],\n    y: []\n  };\n\n  var combine = function combine(memo, datum) {\n    var x = Array.isArray(datum) ? datum.map(function (d) {\n      return d.x;\n    }).filter(Boolean) : datum.x;\n    var y = Array.isArray(datum) ? datum.map(function (d) {\n      return d.y;\n    }).filter(Boolean) : datum.y;\n    return {\n      x: x !== undefined ? memo.x.concat(x) : memo.x,\n      y: y !== undefined ? memo.y.concat(y) : memo.y\n    };\n  };\n\n  return Helpers.reduceChildren(childComponents.slice(0), iteratee, {}, initialMemo, combine);\n}\nexport function getCategoryAndAxisStringsFromChildren(props, axis, childComponents) {\n  var categories = _isPlainObject(props.categories) ? props.categories[axis] : props.categories;\n  var axisComponent = Axis.getAxisComponent(childComponents, axis);\n  var axisStrings = axisComponent ? Data.getStringsFromAxes(axisComponent.props, axis) : [];\n  var categoryStrings = categories || getStringsFromCategories(childComponents, axis);\n  return _uniq(_flatten(_toConsumableArray(categoryStrings).concat(_toConsumableArray(axisStrings))));\n}\nexport function getStringsFromChildren(props, childComponents) {\n  childComponents = childComponents || React.Children.toArray(props.children);\n  var xStrings = getCategoryAndAxisStringsFromChildren(props, \"x\", childComponents);\n  var yStrings = getCategoryAndAxisStringsFromChildren(props, \"y\", childComponents);\n  var dataStrings = getStringsFromData(childComponents);\n  return {\n    x: _uniq(_flatten(_toConsumableArray(xStrings).concat(_toConsumableArray(dataStrings.x)))),\n    y: _uniq(_flatten(_toConsumableArray(yStrings).concat(_toConsumableArray(dataStrings.y))))\n  };\n}\nexport function getCategories(props, childComponents, allStrings) {\n  var xPropCategories = props.categories && !Array.isArray(props.categories) ? props.categories.x : props.categories;\n  var yPropCategories = props.categories && !Array.isArray(props.categories) ? props.categories.y : props.categories;\n  var fallbackRequired = !xPropCategories || !yPropCategories;\n  var fallbackProps = fallbackRequired ? allStrings || getStringsFromChildren(props, childComponents) : {};\n  var xCategories = xPropCategories || fallbackProps.x;\n  var yCategories = yPropCategories || fallbackProps.y;\n  return {\n    x: xCategories.length > 0 ? xCategories : undefined,\n    y: yCategories.length > 0 ? yCategories : undefined\n  };\n}","map":null,"metadata":{},"sourceType":"module"}