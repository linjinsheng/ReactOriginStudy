{"ast":null,"code":"import _defaults from \"lodash/defaults\";\nimport _assign from \"lodash/assign\";\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Helpers, Scale, Axis } from \"victory-core\";\nvar orientationSign = {\n  top: -1,\n  left: -1,\n  right: 1,\n  bottom: 1\n};\n\nvar exists = function exists(val) {\n  return val !== null && val !== undefined;\n};\n\nvar getCurrentAxis = function getCurrentAxis(props, axis) {\n  var orientation = props.orientation,\n      horizontal = props.horizontal;\n\n  if (orientation) {\n    var dimensions = {\n      top: \"x\",\n      bottom: \"x\",\n      left: \"y\",\n      right: \"y\"\n    };\n    return dimensions[orientation];\n  }\n\n  var otherAxis = axis === \"x\" ? \"y\" : \"x\";\n  return horizontal ? otherAxis : axis;\n};\n\nvar getScale = function getScale(props) {\n  var axis = Axis.getAxis(props);\n  var currentAxis = getCurrentAxis(props, axis);\n  var scale = Scale.getBaseScale(props, axis);\n  var propsDomain = props.domain && props.domain[axis];\n  var domain = propsDomain || Axis.getDomain(props) || scale.domain();\n  scale.range(Helpers.getRange(props, currentAxis));\n  scale.domain(domain);\n  return scale;\n};\n\nvar getStyleObject = function getStyleObject(props) {\n  var theme = props.theme,\n      dependentAxis = props.dependentAxis;\n  var generalAxisStyle = theme && theme.axis && theme.axis.style;\n  var axisType = dependentAxis ? \"dependentAxis\" : \"independentAxis\";\n  var specificAxisStyle = theme && theme[axisType] && theme[axisType].style;\n\n  var mergeStyles = function mergeStyles() {\n    var styleNamespaces = [\"axis\", \"axisLabel\", \"grid\", \"parent\", \"tickLabels\", \"ticks\"];\n    return styleNamespaces.reduce(function (memo, curr) {\n      memo[curr] = _defaults({}, specificAxisStyle[curr], generalAxisStyle[curr]);\n      return memo;\n    }, {});\n  };\n\n  return generalAxisStyle && specificAxisStyle ? mergeStyles() : specificAxisStyle || generalAxisStyle;\n};\n\nexport var getStyles = function getStyles(props, styleObject) {\n  var style = props.style || {};\n  styleObject = styleObject || {};\n  var parentStyleProps = {\n    height: \"100%\",\n    width: \"100%\"\n  };\n  return {\n    parent: _defaults(style.parent, styleObject.parent, parentStyleProps),\n    axis: _defaults({}, style.axis, styleObject.axis),\n    axisLabel: _defaults({}, style.axisLabel, styleObject.axisLabel),\n    grid: _defaults({}, style.grid, styleObject.grid),\n    ticks: _defaults({}, style.ticks, styleObject.ticks),\n    tickLabels: _defaults({}, style.tickLabels, styleObject.tickLabels)\n  };\n};\n\nvar getTickProps = function getTickProps(layout, style, datum) {\n  var position = layout.position,\n      transform = layout.transform;\n  return {\n    x1: transform.x,\n    y1: transform.y,\n    x2: transform.x + position.x2,\n    y2: transform.y + position.y2,\n    style: style,\n    datum: datum\n  };\n}; // eslint-disable-next-line max-params\n\n\nvar getTickLabelProps = function getTickLabelProps(layout, style, anchors, datum, text) {\n  var position = layout.position,\n      transform = layout.transform;\n  return {\n    style: style,\n    x: transform.x + position.x,\n    y: transform.y + position.y,\n    verticalAnchor: anchors.verticalAnchor,\n    textAnchor: anchors.textAnchor,\n    angle: style.angle,\n    text: text,\n    datum: datum\n  };\n};\n\nvar getGridProps = function getGridProps(layout, style, datum) {\n  var edge = layout.edge,\n      transform = layout.transform;\n  return {\n    x1: transform.x,\n    y1: transform.y,\n    x2: edge.x + transform.x,\n    y2: edge.y + transform.y,\n    style: style,\n    datum: datum\n  };\n};\n\nvar getAxisProps = function getAxisProps(modifiedProps, calculatedValues, globalTransform) {\n  var style = calculatedValues.style,\n      padding = calculatedValues.padding,\n      isVertical = calculatedValues.isVertical;\n  var width = modifiedProps.width,\n      height = modifiedProps.height;\n  return {\n    style: style.axis,\n    x1: isVertical ? globalTransform.x : padding.left + globalTransform.x,\n    x2: isVertical ? globalTransform.x : width - padding.right + globalTransform.x,\n    y1: isVertical ? padding.top + globalTransform.y : globalTransform.y,\n    y2: isVertical ? height - padding.bottom + globalTransform.y : globalTransform.y\n  };\n};\n\nvar getEvaluatedStyles = function getEvaluatedStyles(style, props) {\n  return {\n    tickStyle: Helpers.evaluateStyle(style.ticks, props),\n    labelStyle: Helpers.evaluateStyle(style.tickLabels, props),\n    gridStyle: Helpers.evaluateStyle(style.grid, props)\n  };\n};\n\nvar getAxisLabelProps = function getAxisLabelProps(props, calculatedValues, globalTransform) {\n  var style = calculatedValues.style,\n      orientation = calculatedValues.orientation,\n      padding = calculatedValues.padding,\n      labelPadding = calculatedValues.labelPadding,\n      isVertical = calculatedValues.isVertical;\n  var sign = orientationSign[orientation];\n  var hPadding = padding.left + padding.right;\n  var vPadding = padding.top + padding.bottom;\n  var verticalAnchor = sign < 0 ? \"end\" : \"start\";\n  var labelStyle = style.axisLabel;\n  var angle = isVertical ? -90 : 0; // eslint-disable-line no-magic-numbers\n\n  var x = isVertical ? globalTransform.x + sign * labelPadding : (props.width - hPadding) / 2 + padding.left + globalTransform.x;\n  var y = isVertical ? (props.height - vPadding) / 2 + padding.top + globalTransform.y : sign * labelPadding + globalTransform.y;\n  return {\n    x: x,\n    y: y,\n    verticalAnchor: labelStyle.verticalAnchor || verticalAnchor,\n    textAnchor: labelStyle.textAnchor || \"middle\",\n    angle: labelStyle.angle === undefined ? angle : labelStyle.angle,\n    style: labelStyle,\n    text: props.label\n  };\n};\n\nvar getAnchors = function getAnchors(orientation, isVertical) {\n  var anchorOrientation = {\n    top: \"end\",\n    left: \"end\",\n    right: \"start\",\n    bottom: \"start\"\n  };\n  var anchor = anchorOrientation[orientation];\n  return {\n    textAnchor: isVertical ? anchor : \"middle\",\n    verticalAnchor: isVertical ? \"middle\" : anchor\n  };\n};\n\nvar getLabelPadding = function getLabelPadding(props, style) {\n  var labelStyle = style.axisLabel || {};\n\n  if (labelStyle.padding !== undefined && labelStyle.padding !== null) {\n    return labelStyle.padding;\n  }\n\n  var isVertical = Axis.isVertical(props); // TODO: magic numbers\n\n  /*eslint-disable no-magic-numbers*/\n\n  var fontSize = labelStyle.fontSize || 14;\n  return props.label ? fontSize * (isVertical ? 2.3 : 1.6) : 0;\n  /*eslint-enable no-magic-numbers*/\n};\n\nvar getDefaultOrientations = function getDefaultOrientations(axis, originSign, horizontal) {\n  var sign = originSign || \"positive\";\n  var orientations = {\n    positive: {\n      x: \"bottom\",\n      y: \"left\"\n    },\n    negative: {\n      x: \"top\",\n      y: \"right\"\n    }\n  };\n  var horizontalOrientations = {\n    positive: {\n      x: \"left\",\n      y: \"bottom\"\n    },\n    negative: {\n      x: \"right\",\n      y: \"top\"\n    }\n  };\n  return horizontal ? horizontalOrientations[sign][axis] : orientations[sign][axis];\n};\n\nvar getStandaloneOffset = function getStandaloneOffset(props, calculatedValues) {\n  var style = calculatedValues.style,\n      scale = calculatedValues.scale,\n      orientation = calculatedValues.orientation,\n      padding = calculatedValues.padding,\n      axis = calculatedValues.axis,\n      ticks = calculatedValues.ticks,\n      stringTicks = calculatedValues.stringTicks,\n      isVertical = calculatedValues.isVertical,\n      labelPadding = calculatedValues.labelPadding;\n  var polar = props.polar,\n      horizontal = props.horizontal;\n  var sharedProps = {\n    scale: _defineProperty({}, axis, scale),\n    polar: polar,\n    horizontal: horizontal,\n    ticks: ticks,\n    stringTicks: stringTicks\n  };\n  var xPadding = orientation === \"right\" ? padding.right : padding.left;\n  var yPadding = orientation === \"top\" ? padding.top : padding.bottom;\n  var offsetX = props.offsetX !== null && props.offsetX !== undefined ? props.offsetX : xPadding;\n  var offsetY = props.offsetY !== null && props.offsetY !== undefined ? props.offsetY : yPadding;\n  var fontSize = style.axisLabel.fontSize || 14; // eslint-disable-line no-magic-numbers\n\n  var tickSizes = ticks.map(function (data, index) {\n    var tick = stringTicks ? props.tickValues[data - 1] : data;\n    var tickStyle = Helpers.evaluateStyle(style.ticks, _assign({}, sharedProps, {\n      tick: tick,\n      index: index\n    }));\n    return tickStyle.size || 0;\n  });\n  var totalPadding = fontSize + 2 * Math.max.apply(Math, _toConsumableArray(tickSizes)) + labelPadding;\n  var minimumPadding = 1.2 * fontSize; // eslint-disable-line no-magic-numbers\n\n  var x = isVertical ? totalPadding : minimumPadding;\n  var y = isVertical ? minimumPadding : totalPadding;\n  return {\n    x: offsetX !== null && offsetX !== undefined ? offsetX : x,\n    y: offsetY !== null && offsetY !== undefined ? offsetY : y\n  };\n}; // eslint-disable-next-line complexity\n\n\nvar getOffset = function getOffset(props, calculatedValues) {\n  var scale = calculatedValues.scale,\n      origin = calculatedValues.origin,\n      orientation = calculatedValues.orientation,\n      orientations = calculatedValues.orientations,\n      domain = calculatedValues.domain,\n      padding = calculatedValues.padding;\n  var top = padding.top,\n      bottom = padding.bottom,\n      left = padding.left,\n      right = padding.right;\n  var calculatedOrientation = {\n    x: orientation === \"bottom\" || orientation === \"top\" ? orientation : orientations.x,\n    y: orientation === \"left\" || orientation === \"right\" ? orientation : orientations.y\n  }; // make the axes line up, and cross when appropriate\n\n  var orientationOffset = {\n    x: calculatedOrientation.y === \"left\" ? left : right,\n    y: calculatedOrientation.x === \"bottom\" ? bottom : top\n  };\n  var originOffset = {\n    x: calculatedOrientation.y === \"left\" ? 0 : props.width,\n    y: calculatedOrientation.x === \"bottom\" ? props.height : 0\n  };\n  var originPosition = {\n    x: origin.x === domain.x[0] || origin.x === domain.x[1] ? 0 : scale.x(origin.x),\n    y: origin.y === domain.y[0] || origin.y === domain.y[1] ? 0 : scale.y(origin.y)\n  };\n  var x = originPosition.x ? Math.abs(originOffset.x - originPosition.x) : orientationOffset.x;\n  var y = originPosition.y ? Math.abs(originOffset.y - originPosition.y) : orientationOffset.y;\n  var offsetX = exists(props.offsetX) ? props.offsetX : x;\n  var offsetY = exists(props.offsetY) ? props.offsetY : y;\n  return {\n    x: offsetX,\n    y: offsetY\n  };\n}; // eslint-disable-next-line complexity\n\n\nvar getHorizontalOffset = function getHorizontalOffset(props, calculatedValues) {\n  var scale = calculatedValues.scale,\n      origin = calculatedValues.origin,\n      orientation = calculatedValues.orientation,\n      orientations = calculatedValues.orientations,\n      domain = calculatedValues.domain,\n      padding = calculatedValues.padding;\n  var top = padding.top,\n      bottom = padding.bottom,\n      left = padding.left,\n      right = padding.right;\n  var calculatedOrientation = {\n    y: orientation === \"bottom\" || orientation === \"top\" ? orientation : orientations.x,\n    x: orientation === \"left\" || orientation === \"right\" ? orientation : orientations.y\n  }; // make the axes line up, and cross when appropriate\n\n  var orientationOffset = {\n    x: calculatedOrientation.y === \"bottom\" ? bottom : top,\n    y: calculatedOrientation.x === \"left\" ? left : right\n  };\n  var originOffset = {\n    y: calculatedOrientation.x === \"left\" ? 0 : props.width,\n    x: calculatedOrientation.y === \"bottom\" ? props.height : 0\n  };\n  var originPosition = {\n    x: origin.x === domain.x[0] || origin.x === domain.x[1] ? 0 : scale.x(origin.x),\n    y: origin.y === domain.y[0] || origin.y === domain.y[1] ? 0 : scale.y(origin.y)\n  };\n  var y = originPosition.x ? Math.abs(originOffset.x - originPosition.x) : orientationOffset.x;\n  var x = originPosition.y ? Math.abs(originOffset.y - originPosition.y) : orientationOffset.y;\n  var offsetX = exists(props.offsetX) ? props.offsetX : x;\n  var offsetY = exists(props.offsetY) ? props.offsetY : y;\n  return {\n    x: offsetX,\n    y: offsetY\n  };\n};\n\nvar getTransform = function getTransform(props, calculatedValues, offset) {\n  var orientation = calculatedValues.orientation,\n      axis = calculatedValues.axis;\n  var axisValue = Axis.getAxisValue(props, axis);\n  return {\n    top: {\n      x: 0,\n      y: axisValue !== undefined ? axisValue : offset.y\n    },\n    bottom: {\n      x: 0,\n      y: axisValue !== undefined ? axisValue : props.height - offset.y\n    },\n    left: {\n      x: axisValue !== undefined ? axisValue : offset.x,\n      y: 0\n    },\n    right: {\n      x: axisValue !== undefined ? axisValue : props.width - offset.x,\n      y: 0\n    }\n  }[orientation];\n};\n\nvar getTickPosition = function getTickPosition(style, orientation, isVertical) {\n  var tickStyle = style.tickStyle,\n      labelStyle = style.labelStyle;\n  var size = tickStyle.size || 0;\n  var tickPadding = tickStyle.padding || 0;\n  var labelPadding = labelStyle.padding || 0;\n  var tickSpacing = size + tickPadding + labelPadding;\n  var sign = orientationSign[orientation];\n  return {\n    x: isVertical ? sign * tickSpacing : 0,\n    x2: isVertical ? sign * size : 0,\n    y: isVertical ? 0 : sign * tickSpacing,\n    y2: isVertical ? 0 : sign * size\n  };\n};\n\nvar getTickTransform = function getTickTransform(tick, globalTransform, isVertical) {\n  return {\n    x: isVertical ? globalTransform.x : tick + globalTransform.x,\n    y: isVertical ? tick + globalTransform.y : globalTransform.y\n  };\n};\n\nvar getGridEdge = function getGridEdge(props, calculatedValues) {\n  var orientation = calculatedValues.orientation,\n      padding = calculatedValues.padding,\n      isVertical = calculatedValues.isVertical;\n  var sign = -orientationSign[orientation];\n  var x = isVertical ? sign * (props.width - (padding.left + padding.right)) : 0;\n  var y = isVertical ? 0 : sign * (props.height - (padding.top + padding.bottom));\n  return {\n    x: x,\n    y: y\n  };\n};\n\nvar getGridOffset = function getGridOffset(calculatedValues, offset) {\n  var padding = calculatedValues.padding,\n      orientation = calculatedValues.orientation,\n      crossAxis = calculatedValues.crossAxis;\n  var xPadding = orientation === \"right\" ? padding.right : padding.left;\n  var yPadding = orientation === \"top\" ? padding.top : padding.bottom;\n  return {\n    x: crossAxis ? offset.x - xPadding : 0,\n    y: crossAxis ? offset.y - yPadding : 0\n  };\n};\n\nvar getLayoutProps = function getLayoutProps(modifiedProps, calculatedValues) {\n  var offset;\n\n  if (calculatedValues.domain.x && calculatedValues.domain.y) {\n    offset = modifiedProps.horizontal ? getHorizontalOffset(modifiedProps, calculatedValues) : getOffset(modifiedProps, calculatedValues);\n  } else {\n    offset = getStandaloneOffset(modifiedProps, calculatedValues);\n  }\n\n  return {\n    globalTransform: getTransform(modifiedProps, calculatedValues, offset),\n    gridOffset: getGridOffset(calculatedValues, offset),\n    gridEdge: getGridEdge(modifiedProps, calculatedValues)\n  };\n};\n\nvar getOrientation = function getOrientation(props) {\n  if (props.orientation) {\n    return props.orientation;\n  }\n\n  var defaultOrientations = {\n    dependent: props.horizontal ? \"bottom\" : \"left\",\n    independent: props.horizontal ? \"left\" : \"bottom\"\n  };\n  return props.dependentAxis ? defaultOrientations.dependent : defaultOrientations.independent;\n}; // eslint-disable-next-line complexity\n\n\nvar getCalculatedValues = function getCalculatedValues(props) {\n  var defaultStyles = getStyleObject(props);\n  var style = getStyles(props, defaultStyles);\n  var padding = Helpers.getPadding(props);\n  var labelPadding = getLabelPadding(props, style);\n  var stringTicks = Axis.stringTicks(props) ? props.tickValues : undefined;\n  var axis = Axis.getAxis(props);\n  var axisDomain = Axis.getDomain(props);\n  var axisScale = getScale(props);\n  var xAxisDomain = axis === \"x\" ? axisDomain : undefined;\n  var yAxisDomain = axis === \"y\" ? axisDomain : undefined;\n  var xAxisScale = axis === \"x\" ? axisScale : undefined;\n  var yAxisScale = axis === \"y\" ? axisScale : undefined;\n  var crossAxis = props.crossAxis === false || props.standalone === true ? false : true;\n  var ticks = Axis.getTicks(props, axisScale, crossAxis);\n  var tickFormat = Axis.getTickFormat(props, axisScale);\n  var range = {\n    x: Helpers.getRange(props, \"x\"),\n    y: Helpers.getRange(props, \"y\")\n  }; // use full domain if passed in from parent,\n  // otherwise use the just the one axis available\n\n  var domain = {\n    x: props.domain && props.domain.x ? props.domain.x : xAxisDomain,\n    y: props.domain && props.domain.y ? props.domain.y : yAxisDomain\n  }; // use full scale if passed in from parent,\n  // otherwise use the just the one axis available\n\n  var scale = {\n    x: props.domain && props.domain.x ? Scale.getBaseScale(props, \"x\").domain(props.domain.x).range(props.horizontal ? range.y : range.x) : xAxisScale,\n    y: props.domain && props.domain.y ? Scale.getBaseScale(props, \"y\").domain(props.domain.y).range(props.horizontal ? range.x : range.y) : yAxisScale\n  };\n  var origin = domain.x && domain.y ? Axis.getOrigin(domain) : undefined;\n  var originSign = origin ? {\n    x: Axis.getOriginSign(origin.x, domain.x),\n    y: Axis.getOriginSign(origin.y, domain.y)\n  } : undefined;\n  var orientations = originSign ? {\n    x: getDefaultOrientations(\"x\", originSign.y, props.horizontal),\n    y: getDefaultOrientations(\"y\", originSign.x, props.horizontal)\n  } : undefined;\n  var orientation = orientations ? props.orientation || orientations[axis] : getOrientation(props);\n  var isVertical = Axis.isVertical(Object.assign({}, props, {\n    orientation: orientation\n  }));\n  var anchors = getAnchors(orientation, isVertical);\n  return {\n    anchors: anchors,\n    axis: axis,\n    crossAxis: crossAxis,\n    domain: domain,\n    isVertical: isVertical,\n    labelPadding: labelPadding,\n    orientation: orientation,\n    orientations: orientations,\n    origin: origin,\n    padding: padding,\n    scale: scale,\n    stringTicks: stringTicks,\n    style: style,\n    tickFormat: tickFormat,\n    ticks: ticks\n  };\n};\n\nexport var getBaseProps = function getBaseProps(props, fallbackProps) {\n  props = Axis.modifyProps(props, fallbackProps);\n  var calculatedValues = getCalculatedValues(props);\n  var axis = calculatedValues.axis,\n      style = calculatedValues.style,\n      orientation = calculatedValues.orientation,\n      isVertical = calculatedValues.isVertical,\n      scale = calculatedValues.scale,\n      ticks = calculatedValues.ticks,\n      tickFormat = calculatedValues.tickFormat,\n      anchors = calculatedValues.anchors,\n      domain = calculatedValues.domain,\n      stringTicks = calculatedValues.stringTicks,\n      name = calculatedValues.name;\n  var otherAxis = axis === \"x\" ? \"y\" : \"x\";\n  var _props = props,\n      width = _props.width,\n      height = _props.height,\n      standalone = _props.standalone,\n      theme = _props.theme,\n      polar = _props.polar,\n      padding = _props.padding,\n      horizontal = _props.horizontal;\n\n  var _getLayoutProps = getLayoutProps(props, calculatedValues),\n      globalTransform = _getLayoutProps.globalTransform,\n      gridOffset = _getLayoutProps.gridOffset,\n      gridEdge = _getLayoutProps.gridEdge;\n\n  var sharedProps = {\n    scale: _defineProperty({}, axis, scale[axis]),\n    polar: polar,\n    horizontal: horizontal,\n    ticks: ticks,\n    stringTicks: stringTicks\n  };\n  var axisProps = getAxisProps(props, calculatedValues, globalTransform);\n  var axisLabelProps = getAxisLabelProps(props, calculatedValues, globalTransform);\n  var initialChildProps = {\n    parent: _assign({\n      style: style.parent,\n      ticks: ticks,\n      standalone: standalone,\n      theme: theme,\n      width: width,\n      height: height,\n      padding: padding,\n      domain: domain,\n      name: name\n    }, sharedProps)\n  };\n  var gridProps = {\n    dimension: otherAxis,\n    range: _defineProperty({}, otherAxis, Helpers.getRange(props, otherAxis)),\n    scale: props.scale && props.scale[otherAxis] ? _defineProperty({}, otherAxis, props.scale[otherAxis]) : undefined\n  };\n  return ticks.reduce(function (childProps, tickValue, index) {\n    var tick = stringTicks ? stringTicks[index] : tickValue;\n    var text = tickFormat(tickValue, index, ticks);\n    var styles = getEvaluatedStyles(style, _assign({}, sharedProps, {\n      tick: tick,\n      tickValue: tickValue,\n      index: index,\n      text: text\n    }));\n    var tickLayout = {\n      position: getTickPosition(styles, orientation, isVertical),\n      transform: getTickTransform(scale[axis](tickValue), globalTransform, isVertical)\n    };\n    var gridLayout = {\n      edge: gridEdge,\n      transform: {\n        x: isVertical ? -gridOffset.x + globalTransform.x : scale[axis](tickValue) + globalTransform.x,\n        y: isVertical ? scale[axis](tickValue) + globalTransform.y : gridOffset.y + globalTransform.y\n      }\n    };\n    childProps[index] = {\n      axis: _assign({\n        dimension: axis\n      }, sharedProps, axisProps),\n      axisLabel: _assign({}, sharedProps, axisLabelProps),\n      ticks: _assign({}, sharedProps, getTickProps(tickLayout, styles.tickStyle, tickValue)),\n      tickLabels: _assign({}, sharedProps, getTickLabelProps(tickLayout, styles.labelStyle, anchors, tickValue, text)),\n      grid: _assign({}, sharedProps, gridProps, getGridProps(gridLayout, styles.gridStyle, tickValue))\n    };\n    return childProps;\n  }, initialChildProps);\n};","map":null,"metadata":{},"sourceType":"module"}